from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
from aiogram.utils.keyboard import InlineKeyboardBuilder
from ssmart.config import ADMINS
from ssmart.database.requests import get_subcategories, get_brands, get_categories


async def admin_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    if user_id in ADMINS:
        buttons = [
            [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'), KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥')],
            [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é'), KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')],
            [KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å'), KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')],
            [KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é')]
        ]
        return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


async def add_categories(for_admin=False):
    all_categories = await get_categories()
    keyboard = InlineKeyboardBuilder()

    for category in all_categories:
        cb_data = f'add_category_{category.id}' if for_admin else f'show_category_{category.id}'
        keyboard.add(InlineKeyboardButton(text=category.name_ru, callback_data=cb_data))

    keyboard.add(InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to_main'))

    return keyboard.adjust(2).as_markup()


async def add_brands(category_id):
    all_brands = await get_brands(category_id)
    keyboard = InlineKeyboardBuilder()

    for brand in all_brands:
        cb_data = f'add_brands_{brand.id}_{category_id}'
        keyboard.add(InlineKeyboardButton(text=brand.name_ru, callback_data=cb_data))

    keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_categories'))

    return keyboard.adjust(2).as_markup()


async def add_subcategories(brand_id, category_id, for_admin=False):
    all_subcategories = await get_subcategories(brand_id, category_id)
    keyboard = InlineKeyboardBuilder()

    for subcategory in all_subcategories:
        cb_data = f'add_subcategory_{subcategory.id}_{brand_id}_{category_id}' if for_admin else \
            f'show_subcategory_{subcategory.id}_{brand_id}_{category_id}'
        keyboard.add(InlineKeyboardButton(text=subcategory.name_ru, callback_data=cb_data))

    keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_brands'))

    return keyboard.adjust(2).as_markup()


async def add_categories_item():
    all_categories = await get_categories()
    keyboard = InlineKeyboardBuilder()

    for category in all_categories:
        cb_data = f'add_item_category_{category.id}'
        keyboard.add(InlineKeyboardButton(text=category.name_ru, callback_data=cb_data))

    keyboard.add(InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='to_main'))

    return keyboard.adjust(2).as_markup()


async def add_brands_item(category_id):
    all_brands = await get_brands(category_id)
    keyboard = InlineKeyboardBuilder()

    for brand in all_brands:
        cb_data = f'add_item_brands_{brand.id}_{category_id}'
        keyboard.add(InlineKeyboardButton(text=brand.name_ru, callback_data=cb_data))

    keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_categories'))

    return keyboard.adjust(2).as_markup()


async def add_subcategories_item(brand_id, category_id, for_admin=False):
    all_subcategories = await get_subcategories(brand_id, category_id)
    keyboard = InlineKeyboardBuilder()

    for subcategory in all_subcategories:
        cb_data = f'add_item_subcategory_{subcategory.id}_{brand_id}_{category_id}'
        keyboard.add(InlineKeyboardButton(text=subcategory.name_ru, callback_data=cb_data))

    keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_brands'))

    return keyboard.adjust(2).as_markup()
